/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type HttpWwwOpengisNetWps20 =
  | {
      name?: ({
        namespaceURI?: (string | null) | "";
        /**
         * http://www.w3.org/TR/xmlschema-2/#NCName
         */
        localPart: string | null;
        prefix?: (string | null) | "";
        [k: string]: any;
      } | null) & {
        localPart?: "BoundingBoxData";
        namespaceURI?: "http://www.opengis.net/wps/2.0";
        [k: string]: any;
      };
      value?: BoundingBoxData1;
      [k: string]: any;
    }
  | {
      name?: ({
        namespaceURI?: (string | null) | "";
        /**
         * http://www.w3.org/TR/xmlschema-2/#NCName
         */
        localPart: string | null;
        prefix?: (string | null) | "";
        [k: string]: any;
      } | null) & {
        localPart?: "DataDescription";
        namespaceURI?: "http://www.opengis.net/wps/2.0";
        [k: string]: any;
      };
      value?: DataDescriptionType;
      [k: string]: any;
    }
  | {
      name?: ({
        namespaceURI?: (string | null) | "";
        /**
         * http://www.w3.org/TR/xmlschema-2/#NCName
         */
        localPart: string | null;
        prefix?: (string | null) | "";
        [k: string]: any;
      } | null) & {
        localPart?: "SupportedCRS";
        namespaceURI?: "http://www.opengis.net/wps/2.0";
        [k: string]: any;
      };
      value?: SupportedCRS;
      [k: string]: any;
    }
  | {
      name?: ({
        namespaceURI?: (string | null) | "";
        /**
         * http://www.w3.org/TR/xmlschema-2/#NCName
         */
        localPart: string | null;
        prefix?: (string | null) | "";
        [k: string]: any;
      } | null) & {
        localPart?: "ProcessOffering";
        namespaceURI?: "http://www.opengis.net/wps/2.0";
        [k: string]: any;
      };
      value?: ProcessOffering;
      [k: string]: any;
    }
  | {
      name?: ({
        namespaceURI?: (string | null) | "";
        /**
         * http://www.w3.org/TR/xmlschema-2/#NCName
         */
        localPart: string | null;
        prefix?: (string | null) | "";
        [k: string]: any;
      } | null) & {
        localPart?: "ExpirationDate";
        namespaceURI?: "http://www.opengis.net/wps/2.0";
        [k: string]: any;
      };
      /**
       * http://www.w3.org/TR/xmlschema-2/#dateTime
       */
      value?: {
        /**
         * http://www.w3.org/TR/xmlschema-2/#decimal
         */
        year?: number | null;
        month?: (number | null) & {
          [k: string]: any;
        };
        day?: (number | null) & {
          [k: string]: any;
        };
        hour?: (number | null) & {
          [k: string]: any;
        };
        minute?: (number | null) & {
          [k: string]: any;
        };
        second?: (number | null) & {
          [k: string]: any;
        };
        fractionalSecond?: (number | null) & {
          [k: string]: any;
        };
        timezone?: (number | null) & {
          [k: string]: any;
        };
        [k: string]: any;
      } | null;
      [k: string]: any;
    }
  | {
      name?: ({
        namespaceURI?: (string | null) | "";
        /**
         * http://www.w3.org/TR/xmlschema-2/#NCName
         */
        localPart: string | null;
        prefix?: (string | null) | "";
        [k: string]: any;
      } | null) & {
        localPart?: "GetCapabilities";
        namespaceURI?: "http://www.opengis.net/wps/2.0";
        [k: string]: any;
      };
      value?: GetCapabilitiesType2;
      [k: string]: any;
    }
  | {
      name?: ({
        namespaceURI?: (string | null) | "";
        /**
         * http://www.w3.org/TR/xmlschema-2/#NCName
         */
        localPart: string | null;
        prefix?: (string | null) | "";
        [k: string]: any;
      } | null) & {
        localPart?: "Process";
        namespaceURI?: "http://www.opengis.net/wps/2.0";
        [k: string]: any;
      };
      value?: ProcessDescriptionType1;
      [k: string]: any;
    }
  | {
      name?: ({
        namespaceURI?: (string | null) | "";
        /**
         * http://www.w3.org/TR/xmlschema-2/#NCName
         */
        localPart: string | null;
        prefix?: (string | null) | "";
        [k: string]: any;
      } | null) & {
        localPart?: "LiteralValue";
        namespaceURI?: "http://www.opengis.net/wps/2.0";
        [k: string]: any;
      };
      value?: LiteralValue1;
      [k: string]: any;
    }
  | {
      name?: ({
        namespaceURI?: (string | null) | "";
        /**
         * http://www.w3.org/TR/xmlschema-2/#NCName
         */
        localPart: string | null;
        prefix?: (string | null) | "";
        [k: string]: any;
      } | null) & {
        localPart?: "Result";
        namespaceURI?: "http://www.opengis.net/wps/2.0";
        [k: string]: any;
      };
      value?: Result;
      [k: string]: any;
    }
  | {
      name?: ({
        namespaceURI?: (string | null) | "";
        /**
         * http://www.w3.org/TR/xmlschema-2/#NCName
         */
        localPart: string | null;
        prefix?: (string | null) | "";
        [k: string]: any;
      } | null) & {
        localPart?: "LiteralData";
        namespaceURI?: "http://www.opengis.net/wps/2.0";
        [k: string]: any;
      };
      value?: LiteralDataType1;
      [k: string]: any;
    }
  | {
      name?: ({
        namespaceURI?: (string | null) | "";
        /**
         * http://www.w3.org/TR/xmlschema-2/#NCName
         */
        localPart: string | null;
        prefix?: (string | null) | "";
        [k: string]: any;
      } | null) & {
        localPart?: "Contents";
        namespaceURI?: "http://www.opengis.net/wps/2.0";
        [k: string]: any;
      };
      value?: Contents;
      [k: string]: any;
    }
  | {
      name?: ({
        namespaceURI?: (string | null) | "";
        /**
         * http://www.w3.org/TR/xmlschema-2/#NCName
         */
        localPart: string | null;
        prefix?: (string | null) | "";
        [k: string]: any;
      } | null) & {
        localPart?: "DescribeProcess";
        namespaceURI?: "http://www.opengis.net/wps/2.0";
        [k: string]: any;
      };
      value?: DescribeProcess1;
      [k: string]: any;
    }
  | {
      name?: ({
        namespaceURI?: (string | null) | "";
        /**
         * http://www.w3.org/TR/xmlschema-2/#NCName
         */
        localPart: string | null;
        prefix?: (string | null) | "";
        [k: string]: any;
      } | null) & {
        localPart?: "GenericProcess";
        namespaceURI?: "http://www.opengis.net/wps/2.0";
        [k: string]: any;
      };
      value?: GenericProcessType1;
      [k: string]: any;
    }
  | {
      name?: ({
        namespaceURI?: (string | null) | "";
        /**
         * http://www.w3.org/TR/xmlschema-2/#NCName
         */
        localPart: string | null;
        prefix?: (string | null) | "";
        [k: string]: any;
      } | null) & {
        localPart?: "Execute";
        namespaceURI?: "http://www.opengis.net/wps/2.0";
        [k: string]: any;
      };
      value?: ExecuteRequestType1;
      [k: string]: any;
    }
  | {
      name?: ({
        namespaceURI?: (string | null) | "";
        /**
         * http://www.w3.org/TR/xmlschema-2/#NCName
         */
        localPart: string | null;
        prefix?: (string | null) | "";
        [k: string]: any;
      } | null) & {
        localPart?: "GetStatus";
        namespaceURI?: "http://www.opengis.net/wps/2.0";
        [k: string]: any;
      };
      value?: GetStatus1;
      [k: string]: any;
    }
  | {
      name?: ({
        namespaceURI?: (string | null) | "";
        /**
         * http://www.w3.org/TR/xmlschema-2/#NCName
         */
        localPart: string | null;
        prefix?: (string | null) | "";
        [k: string]: any;
      } | null) & {
        localPart?: "JobID";
        namespaceURI?: "http://www.opengis.net/wps/2.0";
        [k: string]: any;
      };
      /**
       * http://www.w3.org/TR/xmlschema-2/#string
       */
      value?: string | null;
      [k: string]: any;
    }
  | {
      name?: ({
        namespaceURI?: (string | null) | "";
        /**
         * http://www.w3.org/TR/xmlschema-2/#NCName
         */
        localPart: string | null;
        prefix?: (string | null) | "";
        [k: string]: any;
      } | null) & {
        localPart?: "Data";
        namespaceURI?: "http://www.opengis.net/wps/2.0";
        [k: string]: any;
      };
      value?: Data;
      [k: string]: any;
    }
  | {
      name?: ({
        namespaceURI?: (string | null) | "";
        /**
         * http://www.w3.org/TR/xmlschema-2/#NCName
         */
        localPart: string | null;
        prefix?: (string | null) | "";
        [k: string]: any;
      } | null) & {
        localPart?: "Capabilities";
        namespaceURI?: "http://www.opengis.net/wps/2.0";
        [k: string]: any;
      };
      value?: WPSCapabilitiesType1;
      [k: string]: any;
    }
  | {
      name?: ({
        namespaceURI?: (string | null) | "";
        /**
         * http://www.w3.org/TR/xmlschema-2/#NCName
         */
        localPart: string | null;
        prefix?: (string | null) | "";
        [k: string]: any;
      } | null) & {
        localPart?: "Reference";
        namespaceURI?: "http://www.opengis.net/wps/2.0";
        [k: string]: any;
      };
      value?: ReferenceType;
      [k: string]: any;
    }
  | {
      name?: ({
        namespaceURI?: (string | null) | "";
        /**
         * http://www.w3.org/TR/xmlschema-2/#NCName
         */
        localPart: string | null;
        prefix?: (string | null) | "";
        [k: string]: any;
      } | null) & {
        localPart?: "ComplexData";
        namespaceURI?: "http://www.opengis.net/wps/2.0";
        [k: string]: any;
      };
      value?: ComplexDataType1;
      [k: string]: any;
    }
  | {
      name?: ({
        namespaceURI?: (string | null) | "";
        /**
         * http://www.w3.org/TR/xmlschema-2/#NCName
         */
        localPart: string | null;
        prefix?: (string | null) | "";
        [k: string]: any;
      } | null) & {
        localPart?: "StatusInfo";
        namespaceURI?: "http://www.opengis.net/wps/2.0";
        [k: string]: any;
      };
      value?: StatusInfo;
      [k: string]: any;
    }
  | {
      name?: ({
        namespaceURI?: (string | null) | "";
        /**
         * http://www.w3.org/TR/xmlschema-2/#NCName
         */
        localPart: string | null;
        prefix?: (string | null) | "";
        [k: string]: any;
      } | null) & {
        localPart?: "Format";
        namespaceURI?: "http://www.opengis.net/wps/2.0";
        [k: string]: any;
      };
      value?: Format;
      [k: string]: any;
    }
  | {
      name?: ({
        namespaceURI?: (string | null) | "";
        /**
         * http://www.w3.org/TR/xmlschema-2/#NCName
         */
        localPart: string | null;
        prefix?: (string | null) | "";
        [k: string]: any;
      } | null) & {
        localPart?: "GetResult";
        namespaceURI?: "http://www.opengis.net/wps/2.0";
        [k: string]: any;
      };
      value?: GetResult1;
      [k: string]: any;
    }
  | {
      name?: ({
        namespaceURI?: (string | null) | "";
        /**
         * http://www.w3.org/TR/xmlschema-2/#NCName
         */
        localPart: string | null;
        prefix?: (string | null) | "";
        [k: string]: any;
      } | null) & {
        localPart?: "Dismiss";
        namespaceURI?: "http://www.opengis.net/wps/2.0";
        [k: string]: any;
      };
      value?: Dismiss1;
      [k: string]: any;
    }
  | {
      name?: ({
        namespaceURI?: (string | null) | "";
        /**
         * http://www.w3.org/TR/xmlschema-2/#NCName
         */
        localPart: string | null;
        prefix?: (string | null) | "";
        [k: string]: any;
      } | null) & {
        localPart?: "ProcessOfferings";
        namespaceURI?: "http://www.opengis.net/wps/2.0";
        [k: string]: any;
      };
      value?: ProcessOfferings;
      [k: string]: any;
    };
export type BoundingBoxData1 = DataDescriptionType & BoundingBoxData;
export type Format1 = Format[];
export type MimeType = string | null;
export type Encoding = string | null;
export type Schema = string | null;
export type MaximumMegabytes = number | null;
export type _Default = boolean | null;
export type SupportedCRS1 = SupportedCRS[];
export type Value = string | null;
export type _Default1 = boolean | null;
export type Process = ProcessDescriptionType1;
export type ProcessDescriptionType1 = DescriptionType2 & ProcessDescriptionType;
export type DescriptionType2 = (DescriptionType & BasicIdentificationType) & DescriptionType1;
export type Title = LanguageStringType[];
export type Value1 = string | null;
export type Lang = string | null;
export type _Abstract = LanguageStringType[];
export type Keywords = KeywordsType[];
export type Keyword = LanguageStringType[];
export type Type = CodeType;
export type Value2 = string | null;
export type CodeSpace = string | null;
export type Identifier = CodeType;
export type Metadata = {
  /**
   * http://www.w3.org/TR/xmlschema-2/#QName
   */
  name?: {
    namespaceURI?: (string | null) | "";
    /**
     * http://www.w3.org/TR/xmlschema-2/#NCName
     */
    localPart: string | null;
    prefix?: (string | null) | "";
    [k: string]: any;
  } | null;
  value?: MetadataType;
  [k: string]: any;
}[];
export type AbstractMetaData = {
  /**
   * http://www.w3.org/TR/xmlschema-2/#QName
   */
  name?: {
    namespaceURI?: (string | null) | "";
    /**
     * http://www.w3.org/TR/xmlschema-2/#NCName
     */
    localPart: string | null;
    prefix?: (string | null) | "";
    [k: string]: any;
  } | null;
  /**
   * http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#key-urType
   */
  value?: {
    [k: string]: any;
  };
  [k: string]: any;
};
export type About = string | null;
export type Type1 = string | null;
export type Href = string | null;
export type Role = string | null;
export type Arcrole = string | null;
export type Title1 = string | null;
export type Show = string | null;
export type Actuate = string | null;
export type Input1 = InputDescriptionType1[];
export type InputDescriptionType1 = DescriptionType2 & InputDescriptionType;
export type DataDescription = {
  /**
   * http://www.w3.org/TR/xmlschema-2/#QName
   */
  name?: {
    namespaceURI?: (string | null) | "";
    /**
     * http://www.w3.org/TR/xmlschema-2/#NCName
     */
    localPart: string | null;
    prefix?: (string | null) | "";
    [k: string]: any;
  } | null;
  value?: DataDescriptionType;
  [k: string]: any;
};
export type Input = InputDescriptionType1[];
export type MinOccurs = number | null;
export type MaxOccurs = string | null;
export type Output1 = OutputDescriptionType1[];
export type OutputDescriptionType1 = DescriptionType2 & OutputDescriptionType;
export type DataDescription1 = {
  /**
   * http://www.w3.org/TR/xmlschema-2/#QName
   */
  name?: {
    namespaceURI?: (string | null) | "";
    /**
     * http://www.w3.org/TR/xmlschema-2/#NCName
     */
    localPart: string | null;
    prefix?: (string | null) | "";
    [k: string]: any;
  } | null;
  value?: DataDescriptionType;
  [k: string]: any;
};
export type Output = OutputDescriptionType1[];
export type Lang1 = string | null;
export type Any = any;
export type JobControlOptions = (string | null)[];
export type OutputTransmission = DataTransmissionModeType[];
export type DataTransmissionModeType = string | null;
export type ProcessVersion = string | null;
export type ProcessModel = string | null;
export type GetCapabilitiesType2 = GetCapabilitiesType & GetCapabilitiesType1;
export type AcceptVersions = AcceptVersionsType;
export type Version = (string | null)[];
export type Sections = SectionsType;
export type Section = (string | null)[];
export type AcceptFormats = AcceptFormatsType;
export type OutputFormat = (string | null)[];
export type AcceptLanguages = GetCapabilitiesTypeAcceptLanguages;
export type Language = (string | null)[];
export type UpdateSequence = string | null;
export type Service = string | null;
export type LiteralValue1 = ValueType & LiteralValue;
export type Value3 = string | null;
export type DataType = string | null;
export type Uom = string | null;
export type JobID = string | null;
export type ExpirationDate = {
  /**
   * http://www.w3.org/TR/xmlschema-2/#decimal
   */
  year?: number | null;
  month?: (number | null) & {
    [k: string]: any;
  };
  day?: (number | null) & {
    [k: string]: any;
  };
  hour?: (number | null) & {
    [k: string]: any;
  };
  minute?: (number | null) & {
    [k: string]: any;
  };
  second?: (number | null) & {
    [k: string]: any;
  };
  fractionalSecond?: (number | null) & {
    [k: string]: any;
  };
  timezone?: (number | null) & {
    [k: string]: any;
  };
  [k: string]: any;
} | null;
export type Output3 = DataOutputType[];
export type Data1 = Data;
export type OtherAttributes = {
  [k: string]: string;
};
export type Content = (
  | (string | null)
  | any
  | {
      /**
       * http://www.w3.org/TR/xmlschema-2/#QName
       */
      name?: {
        namespaceURI?: (string | null) | "";
        /**
         * http://www.w3.org/TR/xmlschema-2/#NCName
         */
        localPart: string | null;
        prefix?: (string | null) | "";
        [k: string]: any;
      } | null;
      value?: any;
      [k: string]: any;
    })[];
export type MimeType1 = string | null;
export type Encoding1 = string | null;
export type Schema1 = string | null;
export type Reference = ReferenceType;
export type Body = {
  [k: string]: any;
};
export type BodyReference = ReferenceTypeBodyReference;
export type Href1 = string | null;
export type Href2 = string | null;
export type MimeType2 = string | null;
export type Encoding2 = string | null;
export type Schema2 = string | null;
export type Output2 = DataOutputType;
export type Id = string | null;
export type LiteralDataType1 = DataDescriptionType & LiteralDataType;
export type LiteralDataDomain = LiteralDataTypeLiteralDataDomain1[];
export type LiteralDataTypeLiteralDataDomain1 = LiteralDataDomainType & LiteralDataTypeLiteralDataDomain;
export type AllowedValues1 = AllowedValues;
export type ValueOrRange = (ValueType | RangeType)[];
export type MinimumValue = ValueType;
export type MaximumValue = ValueType;
export type Spacing = ValueType;
export type RangeClosure = (string | null)[];
export type AnyValue1 = AnyValue;
export type ValuesReference1 = ValuesReference;
export type Value4 = string | null;
export type Reference1 = string | null;
export type DataType1 = DomainMetadataType;
export type Value5 = string | null;
export type Reference2 = string | null;
export type Uom1 = DomainMetadataType;
export type DefaultValue = ValueType;
export type _Default2 = boolean | null;
export type ProcessSummary = ProcessSummaryType1[];
export type ProcessSummaryType1 = DescriptionType2 & ProcessSummaryType;
export type JobControlOptions1 = (string | null)[];
export type OutputTransmission1 = DataTransmissionModeType[];
export type ProcessVersion1 = string | null;
export type ProcessModel1 = string | null;
export type DescribeProcess1 = RequestBaseType & DescribeProcess;
export type Extension = {
  [k: string]: any;
}[];
export type Service1 = string | null;
export type Version1 = string | null;
export type Identifier1 = CodeType[];
export type Lang2 = string | null;
export type GenericProcessType1 = DescriptionType2 & GenericProcessType;
export type Input3 = GenericInputType1[];
export type GenericInputType1 = DescriptionType2 & GenericInputType;
export type Input2 = GenericInputType1[];
export type MinOccurs1 = number | null;
export type MaxOccurs1 = string | null;
export type Output5 = GenericOutputType1[];
export type GenericOutputType1 = DescriptionType2 & GenericOutputType;
export type Output4 = GenericOutputType1[];
export type ExecuteRequestType1 = RequestBaseType & ExecuteRequestType;
export type Identifier2 = CodeType;
export type Input5 = DataInputType[];
export type Data2 = Data;
export type Reference3 = ReferenceType;
export type Input4 = DataInputType[];
export type Id1 = string | null;
export type Output7 = OutputDefinitionType[];
export type Output6 = OutputDefinitionType;
export type Id2 = string | null;
export type Transmission = DataTransmissionModeType;
export type MimeType3 = string | null;
export type Encoding3 = string | null;
export type Schema3 = string | null;
export type Mode = string | null;
export type Response = string | null;
export type GetStatus1 = RequestBaseType & GetStatus;
export type JobID1 = string | null;
export type WPSCapabilitiesType1 = CapabilitiesBaseType & WPSCapabilitiesType;
export type ServiceIdentification1 = DescriptionType & ServiceIdentification;
export type ServiceType = CodeType;
export type ServiceTypeVersion = (string | null)[];
export type Profile = (string | null)[];
export type Fees = string | null;
export type AccessConstraints = (string | null)[];
export type ServiceProvider1 = ServiceProvider;
export type ProviderName = string | null;
export type ProviderSite = OnlineResourceType;
export type Type2 = string | null;
export type Href3 = string | null;
export type Role1 = string | null;
export type Arcrole1 = string | null;
export type Title2 = string | null;
export type Show1 = string | null;
export type Actuate1 = string | null;
export type ServiceContact = ResponsiblePartySubsetType;
export type IndividualName = string | null;
export type PositionName = string | null;
export type ContactInfo = ContactType;
export type Phone = TelephoneType;
export type Voice = (string | null)[];
export type Facsimile = (string | null)[];
export type Address = AddressType;
export type DeliveryPoint = (string | null)[];
export type City = string | null;
export type AdministrativeArea = string | null;
export type PostalCode = string | null;
export type Country = string | null;
export type ElectronicMailAddress = (string | null)[];
export type OnlineResource = OnlineResourceType;
export type HoursOfService = string | null;
export type ContactInstructions = string | null;
export type Role2 = CodeType;
export type OperationsMetadata1 = OperationsMetadata;
export type Operation1 = Operation[];
export type Dcp = DCP[];
export type Http = HTTP;
export type GetOrPost = (
  | {
      /**
       * http://www.w3.org/TR/xmlschema-2/#QName
       */
      name?: {
        namespaceURI?: (string | null) | "";
        /**
         * http://www.w3.org/TR/xmlschema-2/#NCName
         */
        localPart: string | null;
        prefix?: (string | null) | "";
        [k: string]: any;
      } | null;
      value?: OnlineResourceType & RequestMethodType;
      [k: string]: any;
    }
  | {
      /**
       * http://www.w3.org/TR/xmlschema-2/#QName
       */
      name?: {
        namespaceURI?: (string | null) | "";
        /**
         * http://www.w3.org/TR/xmlschema-2/#NCName
         */
        localPart: string | null;
        prefix?: (string | null) | "";
        [k: string]: any;
      } | null;
      value?: OnlineResourceType & RequestMethodType;
      [k: string]: any;
    })[];
export type Constraint = (UnNamedDomainType & DomainType)[];
export type AllowedValues2 = AllowedValues;
export type AnyValue2 = AnyValue;
export type NoValues1 = NoValues;
export type ValuesReference2 = ValuesReference;
export type DefaultValue1 = ValueType;
export type Meaning = DomainMetadataType;
export type DataType2 = DomainMetadataType;
export type Uom2 = DomainMetadataType;
export type ReferenceSystem = DomainMetadataType;
export type Metadata1 = {
  /**
   * http://www.w3.org/TR/xmlschema-2/#QName
   */
  name?: {
    namespaceURI?: (string | null) | "";
    /**
     * http://www.w3.org/TR/xmlschema-2/#NCName
     */
    localPart: string | null;
    prefix?: (string | null) | "";
    [k: string]: any;
  } | null;
  value?: MetadataType;
  [k: string]: any;
}[];
export type Name = string | null;
export type Parameter = (UnNamedDomainType & DomainType)[];
export type Constraint1 = (UnNamedDomainType & DomainType)[];
export type Metadata2 = {
  /**
   * http://www.w3.org/TR/xmlschema-2/#QName
   */
  name?: {
    namespaceURI?: (string | null) | "";
    /**
     * http://www.w3.org/TR/xmlschema-2/#NCName
     */
    localPart: string | null;
    prefix?: (string | null) | "";
    [k: string]: any;
  } | null;
  value?: MetadataType;
  [k: string]: any;
}[];
export type Name1 = string | null;
export type Parameter1 = (UnNamedDomainType & DomainType)[];
export type Constraint2 = (UnNamedDomainType & DomainType)[];
export type ExtendedCapabilities = {
  [k: string]: any;
};
export type Languages = CapabilitiesBaseTypeLanguages;
export type Language1 = (string | null)[];
export type Version2 = string | null;
export type UpdateSequence1 = string | null;
export type Contents1 = Contents;
export type Extension1 = WPSCapabilitiesTypeExtension;
export type Any1 = (
  | any
  | {
      /**
       * http://www.w3.org/TR/xmlschema-2/#QName
       */
      name?: {
        namespaceURI?: (string | null) | "";
        /**
         * http://www.w3.org/TR/xmlschema-2/#NCName
         */
        localPart: string | null;
        prefix?: (string | null) | "";
        [k: string]: any;
      } | null;
      value?: any;
      [k: string]: any;
    })[];
export type Service2 = string | number | boolean | null;
export type ComplexDataType1 = DataDescriptionType & ComplexDataType;
export type Any2 = (
  | any
  | {
      /**
       * http://www.w3.org/TR/xmlschema-2/#QName
       */
      name?: {
        namespaceURI?: (string | null) | "";
        /**
         * http://www.w3.org/TR/xmlschema-2/#NCName
         */
        localPart: string | null;
        prefix?: (string | null) | "";
        [k: string]: any;
      } | null;
      value?: any;
      [k: string]: any;
    })[];
export type JobID2 = string | null;
export type Status = string | null;
export type ExpirationDate1 = {
  /**
   * http://www.w3.org/TR/xmlschema-2/#decimal
   */
  year?: number | null;
  month?: (number | null) & {
    [k: string]: any;
  };
  day?: (number | null) & {
    [k: string]: any;
  };
  hour?: (number | null) & {
    [k: string]: any;
  };
  minute?: (number | null) & {
    [k: string]: any;
  };
  second?: (number | null) & {
    [k: string]: any;
  };
  fractionalSecond?: (number | null) & {
    [k: string]: any;
  };
  timezone?: (number | null) & {
    [k: string]: any;
  };
  [k: string]: any;
} | null;
export type EstimatedCompletion = {
  /**
   * http://www.w3.org/TR/xmlschema-2/#decimal
   */
  year?: number | null;
  month?: (number | null) & {
    [k: string]: any;
  };
  day?: (number | null) & {
    [k: string]: any;
  };
  hour?: (number | null) & {
    [k: string]: any;
  };
  minute?: (number | null) & {
    [k: string]: any;
  };
  second?: (number | null) & {
    [k: string]: any;
  };
  fractionalSecond?: (number | null) & {
    [k: string]: any;
  };
  timezone?: (number | null) & {
    [k: string]: any;
  };
  [k: string]: any;
} | null;
export type NextPoll = {
  /**
   * http://www.w3.org/TR/xmlschema-2/#decimal
   */
  year?: number | null;
  month?: (number | null) & {
    [k: string]: any;
  };
  day?: (number | null) & {
    [k: string]: any;
  };
  hour?: (number | null) & {
    [k: string]: any;
  };
  minute?: (number | null) & {
    [k: string]: any;
  };
  second?: (number | null) & {
    [k: string]: any;
  };
  fractionalSecond?: (number | null) & {
    [k: string]: any;
  };
  timezone?: (number | null) & {
    [k: string]: any;
  };
  [k: string]: any;
} | null;
export type PercentCompleted = number | null;
export type GetResult1 = RequestBaseType & GetResult;
export type JobID3 = string | null;
export type Dismiss1 = RequestBaseType & Dismiss;
export type JobID4 = string | null;
export type ProcessOffering1 = ProcessOffering[];

export interface DataDescriptionType {
  format: Format1;
  [k: string]: any;
}
export interface Format {
  mimeType?: MimeType;
  encoding?: Encoding;
  schema?: Schema;
  maximumMegabytes?: MaximumMegabytes;
  _default?: _Default;
  [k: string]: any;
}
export interface BoundingBoxData {
  supportedCRS?: SupportedCRS1;
  [k: string]: any;
}
export interface SupportedCRS {
  value?: Value;
  _default?: _Default1;
  [k: string]: any;
}
export interface ProcessOffering {
  process: Process;
  any: Any;
  jobControlOptions: JobControlOptions;
  outputTransmission?: OutputTransmission;
  processVersion?: ProcessVersion;
  processModel?: ProcessModel;
  [k: string]: any;
}
export interface DescriptionType {
  title?: Title;
  _abstract?: _Abstract;
  keywords?: Keywords;
  [k: string]: any;
}
export interface LanguageStringType {
  value?: Value1;
  lang?: Lang;
  [k: string]: any;
}
export interface KeywordsType {
  keyword: Keyword;
  type?: Type;
  [k: string]: any;
}
export interface CodeType {
  value?: Value2;
  codeSpace?: CodeSpace;
  [k: string]: any;
}
export interface BasicIdentificationType {
  identifier?: Identifier;
  metadata?: Metadata;
  [k: string]: any;
}
export interface MetadataType {
  abstractMetaData?: AbstractMetaData;
  about?: About;
  type?: Type1;
  href?: Href;
  role?: Role;
  arcrole?: Arcrole;
  title?: Title1;
  show?: Show;
  actuate?: Actuate;
  [k: string]: any;
}
export interface DescriptionType1 {
  [k: string]: any;
}
export interface ProcessDescriptionType {
  input?: Input1;
  output?: Output1;
  lang?: Lang1;
  [k: string]: any;
}
export interface InputDescriptionType {
  dataDescription?: DataDescription;
  input?: Input;
  minOccurs?: MinOccurs;
  maxOccurs?: MaxOccurs;
  [k: string]: any;
}
export interface OutputDescriptionType {
  dataDescription?: DataDescription1;
  output?: Output;
  [k: string]: any;
}
export interface GetCapabilitiesType {
  acceptVersions?: AcceptVersions;
  sections?: Sections;
  acceptFormats?: AcceptFormats;
  acceptLanguages?: AcceptLanguages;
  updateSequence?: UpdateSequence;
  [k: string]: any;
}
export interface AcceptVersionsType {
  version: Version;
  [k: string]: any;
}
export interface SectionsType {
  section?: Section;
  [k: string]: any;
}
export interface AcceptFormatsType {
  outputFormat?: OutputFormat;
  [k: string]: any;
}
export interface GetCapabilitiesTypeAcceptLanguages {
  language: Language;
  [k: string]: any;
}
export interface GetCapabilitiesType1 {
  service?: Service;
  [k: string]: any;
}
export interface ValueType {
  value?: Value3;
  [k: string]: any;
}
export interface LiteralValue {
  dataType?: DataType;
  uom?: Uom;
  [k: string]: any;
}
export interface Result {
  jobID?: JobID;
  expirationDate?: ExpirationDate;
  output: Output3;
  [k: string]: any;
}
export interface DataOutputType {
  data: Data1;
  reference: Reference;
  output: Output2;
  id: Id;
  [k: string]: any;
}
export interface Data {
  otherAttributes?: OtherAttributes;
  content?: Content;
  mimeType?: MimeType1;
  encoding?: Encoding1;
  schema?: Schema1;
  [k: string]: any;
}
export interface ReferenceType {
  body: Body;
  bodyReference: BodyReference;
  href: Href2;
  mimeType?: MimeType2;
  encoding?: Encoding2;
  schema?: Schema2;
  [k: string]: any;
}
export interface ReferenceTypeBodyReference {
  href: Href1;
  [k: string]: any;
}
export interface LiteralDataType {
  literalDataDomain?: LiteralDataDomain;
  [k: string]: any;
}
export interface LiteralDataDomainType {
  allowedValues: AllowedValues1;
  anyValue: AnyValue1;
  valuesReference: ValuesReference1;
  dataType?: DataType1;
  uom?: Uom1;
  defaultValue?: DefaultValue;
  [k: string]: any;
}
export interface AllowedValues {
  valueOrRange: ValueOrRange;
  [k: string]: any;
}
export interface RangeType {
  minimumValue?: MinimumValue;
  maximumValue?: MaximumValue;
  spacing?: Spacing;
  rangeClosure?: RangeClosure;
  [k: string]: any;
}
export interface AnyValue {
  [k: string]: any;
}
export interface ValuesReference {
  value?: Value4;
  reference: Reference1;
  [k: string]: any;
}
export interface DomainMetadataType {
  value?: Value5;
  reference?: Reference2;
  [k: string]: any;
}
export interface LiteralDataTypeLiteralDataDomain {
  _default?: _Default2;
  [k: string]: any;
}
export interface Contents {
  processSummary: ProcessSummary;
  [k: string]: any;
}
export interface ProcessSummaryType {
  jobControlOptions?: JobControlOptions1;
  outputTransmission?: OutputTransmission1;
  processVersion?: ProcessVersion1;
  processModel?: ProcessModel1;
  [k: string]: any;
}
export interface RequestBaseType {
  extension?: Extension;
  service: Service1;
  version: Version1;
  [k: string]: any;
}
export interface DescribeProcess {
  identifier?: Identifier1;
  lang?: Lang2;
  [k: string]: any;
}
export interface GenericProcessType {
  input?: Input3;
  output?: Output5;
  [k: string]: any;
}
export interface GenericInputType {
  input?: Input2;
  minOccurs?: MinOccurs1;
  maxOccurs?: MaxOccurs1;
  [k: string]: any;
}
export interface GenericOutputType {
  output?: Output4;
  [k: string]: any;
}
export interface ExecuteRequestType {
  identifier?: Identifier2;
  input?: Input5;
  output?: Output7;
  mode?: Mode;
  response?: Response;
  [k: string]: any;
}
export interface DataInputType {
  data: Data2;
  reference: Reference3;
  input: Input4;
  id: Id1;
  [k: string]: any;
}
export interface OutputDefinitionType {
  output?: Output6;
  id: Id2;
  transmission?: Transmission;
  mimeType?: MimeType3;
  encoding?: Encoding3;
  schema?: Schema3;
  [k: string]: any;
}
export interface GetStatus {
  jobID?: JobID1;
  [k: string]: any;
}
export interface CapabilitiesBaseType {
  serviceIdentification?: ServiceIdentification1;
  serviceProvider?: ServiceProvider1;
  operationsMetadata?: OperationsMetadata1;
  languages?: Languages;
  version: Version2;
  updateSequence?: UpdateSequence1;
  [k: string]: any;
}
export interface ServiceIdentification {
  serviceType?: ServiceType;
  serviceTypeVersion?: ServiceTypeVersion;
  profile?: Profile;
  fees?: Fees;
  accessConstraints?: AccessConstraints;
  [k: string]: any;
}
export interface ServiceProvider {
  providerName: ProviderName;
  providerSite?: ProviderSite;
  serviceContact: ServiceContact;
  [k: string]: any;
}
export interface OnlineResourceType {
  type?: Type2;
  href?: Href3;
  role?: Role1;
  arcrole?: Arcrole1;
  title?: Title2;
  show?: Show1;
  actuate?: Actuate1;
  [k: string]: any;
}
export interface ResponsiblePartySubsetType {
  individualName?: IndividualName;
  positionName?: PositionName;
  contactInfo?: ContactInfo;
  role?: Role2;
  [k: string]: any;
}
export interface ContactType {
  phone?: Phone;
  address?: Address;
  onlineResource?: OnlineResource;
  hoursOfService?: HoursOfService;
  contactInstructions?: ContactInstructions;
  [k: string]: any;
}
export interface TelephoneType {
  voice?: Voice;
  facsimile?: Facsimile;
  [k: string]: any;
}
export interface AddressType {
  deliveryPoint?: DeliveryPoint;
  city?: City;
  administrativeArea?: AdministrativeArea;
  postalCode?: PostalCode;
  country?: Country;
  electronicMailAddress?: ElectronicMailAddress;
  [k: string]: any;
}
export interface OperationsMetadata {
  operation: Operation1;
  parameter?: Parameter1;
  constraint?: Constraint2;
  extendedCapabilities?: ExtendedCapabilities;
  [k: string]: any;
}
export interface Operation {
  dcp: Dcp;
  parameter?: Parameter;
  constraint?: Constraint1;
  metadata?: Metadata2;
  name: Name1;
  [k: string]: any;
}
export interface DCP {
  http: Http;
  [k: string]: any;
}
export interface HTTP {
  getOrPost: GetOrPost;
  [k: string]: any;
}
export interface RequestMethodType {
  constraint?: Constraint;
  [k: string]: any;
}
export interface UnNamedDomainType {
  allowedValues: AllowedValues2;
  anyValue: AnyValue2;
  noValues: NoValues1;
  valuesReference: ValuesReference2;
  defaultValue?: DefaultValue1;
  meaning?: Meaning;
  dataType?: DataType2;
  uom: Uom2;
  referenceSystem: ReferenceSystem;
  metadata?: Metadata1;
  [k: string]: any;
}
export interface NoValues {
  [k: string]: any;
}
export interface DomainType {
  name?: Name;
  [k: string]: any;
}
export interface CapabilitiesBaseTypeLanguages {
  language: Language1;
  [k: string]: any;
}
export interface WPSCapabilitiesType {
  contents?: Contents1;
  extension?: Extension1;
  service?: Service2;
  [k: string]: any;
}
export interface WPSCapabilitiesTypeExtension {
  any?: Any1;
  [k: string]: any;
}
export interface ComplexDataType {
  any?: Any2;
  [k: string]: any;
}
export interface StatusInfo {
  jobID: JobID2;
  status: Status;
  expirationDate?: ExpirationDate1;
  estimatedCompletion?: EstimatedCompletion;
  nextPoll?: NextPoll;
  percentCompleted?: PercentCompleted;
  [k: string]: any;
}
export interface GetResult {
  jobID?: JobID3;
  [k: string]: any;
}
export interface Dismiss {
  jobID?: JobID4;
  [k: string]: any;
}
export interface ProcessOfferings {
  processOffering: ProcessOffering1;
  [k: string]: any;
}
